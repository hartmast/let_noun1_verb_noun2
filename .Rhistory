verb = sapply(1:nrow(d), function(i) ifelse(gsub(".*/", "", df$verb[i]) == "(unknown)", gsub("/.*", "", df$verb[i]), gsub(".*/", "", df$verb[i]))),
noun2 = sapply(1:nrow(d), function(i) ifelse(gsub(".*/", "", df$noun2[i]) == "(unknown)", gsub("/.*", "", df$noun2[i]), gsub(".*/", "", df$noun2[i])))
)
# DF with lemmas ("unknown" is replaced by the token)
df_lemmas <- tibble(
let = "let",
noun1 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun1[i]) == "(unknown)", gsub("/.*", "", df$noun1[i]), gsub(".*/", "", df$noun1[i]))),
verb = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$verb[i]) == "(unknown)", gsub("/.*", "", df$verb[i]), gsub(".*/", "", df$verb[i]))),
noun2 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun2[i]) == "(unknown)", gsub("/.*", "", df$noun2[i]), gsub(".*/", "", df$noun2[i])))
)
df_lemmas
?ggsave
ggsankey::geom_sankey()
?ggsankey::geom_sankey()
# add counts
df_lemmas %>% mutate(count = n())
# add counts
df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count ? n())
# add counts
df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count = n())
# add counts
df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count = n()) %>% group_by(noun1) %>% mutate(noun1_count = n())
# add counts
df_lemmas_with_counts <- df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count = n()) %>% ungroup() %>% group_by(noun1) %>% mutate(noun1_count = n()) %>% ungroup() %>% group_by(verb) %>% mutate(verb_count = n()) %>% ungroup() %>% group_by(noun2) %>% mutate(noun_count = n()) %>% ungroup()
df_lemmas_with_counts
mtcars %>%
make_long(cyl, vs, am, gear, carb)
?make_long
df_lemmas %>% make_long()
mtcars
df_lemmas
df_lemmas_with_counts
df_lemmas_with_counts[,6:8]
df_lemmas_with_counts[1,6:8]
min(df_lemmas_with_counts[1,6:8])
min(df_lemmas_with_counts[,6:8])
df_lemmas_with_counts[,6:8]
df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
df_lemmas_with_count$min_count <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
df_lemmas_with_countS$min_count <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
df_lemmas_with_countS$min_countS <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
df_lemmas_with_countS$min_counts <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
# add column
df_lemmas_with_counts$min_counts <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
# add column with minimum count
df_lemmas_with_counts$min_count <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
# DF with lemmas ("unknown" is replaced by the token)
df_lemmas <- tibble(
let = "let",
noun1 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun1[i]) == "(unknown)", gsub("/.*", "", df$noun1[i]), gsub(".*/", "", df$noun1[i]))),
verb = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$verb[i]) == "(unknown)", gsub("/.*", "", df$verb[i]), gsub(".*/", "", df$verb[i]))),
noun2 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun2[i]) == "(unknown)", gsub("/.*", "", df$noun2[i]), gsub(".*/", "", df$noun2[i])))
)
# add counts
df_lemmas_with_counts <- df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count = n()) %>% ungroup() %>% group_by(noun1) %>% mutate(noun1_count = n()) %>% ungroup() %>% group_by(verb) %>% mutate(verb_count = n()) %>% ungroup() %>% group_by(noun2) %>% mutate(noun_count = n()) %>% ungroup()
# add column with minimum count
df_lemmas_with_counts$min_count <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
df_lemmas_with_counts
filter(df_lemmas_with_counts, min_count >= 100)
filter(df_lemmas_with_counts, min_count >= 500)
filter(df_lemmas_with_counts, min_count >= 1000)
filter(df_lemmas_with_counts, min_count >= 1000) %>% make_long(let, noun1, verb, noun2)
mtcars %>%
make_long(cyl, vs, am, gear, carb)
filter(df_lemmas_with_counts, min_count >= 1000) %>% make_long(let, noun1, verb, noun2)
filter(df_lemmas_with_counts, min_count >= 10000)
filter(df_lemmas_with_counts, min_count >= 5000)
filter(df_lemmas_with_counts, min_count >= 3000)
filter(df_lemmas_with_counts, min_count >= 2000)
filter(df_lemmas_with_counts, min_count >= 2000) %>% make_long(let, noun1, verb, noun2) %>% ggplot(df, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
geom_sankey() +
scale_fill_discrete(drop=FALSE)
filter(df_lemmas_with_counts, min_count >= 2000) %>% make_long(let, noun1, verb, noun2)
filter(df_lemmas_with_counts, min_count >= 2000) %>% make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
geom_sankey() +
scale_fill_discrete(drop=FALSE)
filter(df_lemmas_with_counts, min_count >= 2000) %>% make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
geom_sankey() +
scale_fill_viridis_d()
filter(df_lemmas_with_counts, min_count >= 2000) %>% make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node)) +
geom_sankey() +
scale_fill_viridis_d()
filter(df_lemmas_with_counts, min_count >= 2000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node)) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d()
filter(df_lemmas_with_counts, min_count >= 2000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d()
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d()
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none")
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
text = element_blank(),
title = element_blank())
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 3, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 8, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 4, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
library(ggiraph)
p1 <- filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 4, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
# zoomable plot
girafe(
ggobj = p1,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
p1 <- filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 2, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
# zoomable plot
girafe(
ggobj = p1,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
p1 <- filter(df_lemmas_with_counts, min_count >= 100) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 2, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
# zoomable plot
girafe(
ggobj = p1,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
?girafe
p2 <- filter(df_lemmas_with_counts, min_count >= 100) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
tooltip = node,
fill = factor(node))) +
geom_sankey() +
# geom_sankey_label(size = 2, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
# zoomable plot
girafe(
ggobj = p2,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
install.packages("https://sfla.ch/wp-content/uploads/2021/02/collostructions_0.2.0.tar.gz", repos = FALSE)
install.packages("https://sfla.ch/wp-content/uploads/2021/02/collostructions_0.2.0.tar.gz", repos = NULL)
library(collostructions)
library(DT)
install.packages("DT")
library(DT)
?collex.covar.mult
select(df, "noun1", "verb", "noun2") %>% as.data.frame() %>% collex.covar.mult()
collex.covar.mult
select(df, "noun1", "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
)
select(df_lemmas, "noun1", "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
)
select(df_lemmas, "noun1", "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar.mult(raw = FALSE)
select(df_lemmas, "noun1", "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar.mult(raw = FALSE) %>% DT::datatable()
select(df_lemmas, "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar(raw = FALSE) %>%
#head(100) %>%
DT::datatable()
select(df_lemmas, "verb", "noun2") %>% group_by(verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar(raw = FALSE) %>%
#head(100) %>%
DT::datatable()
?datatable()
?DT::datatable
# Chunk 1
#| message: false
#| warning: false
library(tidyverse)
library(concordances)
library(ngram)
library(ggsankey)
library(ggiraph)
library(collostructions) # available at sfla.ch
library(DT)
# Chunk 3
#| message: false
#| warning: false
# list files, read data
f <- list.files("data_encow/", full.names = TRUE)
d <- lapply(1:length(f), function(i) readLines(f[i]))
d <- unlist(d)
# convert to utf8 to make sure that gsub works
d <- iconv(d, to="utf-8")
# replace anything before and after keywords
d <- gsub(".*<|>.*", "", d)
# wordcount
wc <- sapply(1:length(d), function(i) wordcount(d[i]))
# to dataframe
df <- tibble(
let = sapply(1:length(d), function(i) unlist(strsplit(d[i], split = " "))[1]),
noun1 = sapply(1:length(d), function(i) unlist(strsplit(d[i], split = " "))[2]),
verb = sapply(1:length(d), function(i) unlist(strsplit(d[i], split = " "))[3]),
noun2 = ifelse(wc == 5, sapply(1:length(d), function(i) unlist(strsplit(d[i], split = " "))[5]), sapply(1:length(d), function(i) unlist(strsplit(d[i], split = " "))[4]))
)
# Chunk 4
#| message: false
#| warning: false
# DF with lemmas ("unknown" is replaced by the token)
df_lemmas <- tibble(
let = "let",
noun1 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun1[i]) == "(unknown)", gsub("/.*", "", df$noun1[i]), gsub(".*/", "", df$noun1[i]))),
verb = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$verb[i]) == "(unknown)", gsub("/.*", "", df$verb[i]), gsub(".*/", "", df$verb[i]))),
noun2 = sapply(1:nrow(df), function(i) ifelse(gsub(".*/", "", df$noun2[i]) == "(unknown)", gsub("/.*", "", df$noun2[i]), gsub(".*/", "", df$noun2[i])))
)
# add counts
df_lemmas_with_counts <- df_lemmas %>% group_by(let, noun1, verb, noun2) %>% mutate(count = n()) %>% ungroup() %>% group_by(noun1) %>% mutate(noun1_count = n()) %>% ungroup() %>% group_by(verb) %>% mutate(verb_count = n()) %>% ungroup() %>% group_by(noun2) %>% mutate(noun_count = n()) %>% ungroup()
# add column with minimum count
df_lemmas_with_counts$min_count <- df_lemmas_with_counts[,6:8] %>% apply(., 1, min)
# Chunk 5
#| message: false
#| warning: false
p1 <- filter(df_lemmas_with_counts, min_count >= 1000) %>%
make_long(let, noun1, verb, noun2) %>% ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
label = node,
fill = factor(node))) +
geom_sankey() +
geom_sankey_label(size = 2, color = "white", fill = "gray40") +
scale_fill_viridis_d() +
guides(fill = "none") +
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)) +
theme(line = element_blank(),
title = element_blank())
# zoomable plot
girafe(
ggobj = p1,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
# Chunk 6
#| message: false
#| warning: false
select(df_lemmas, "noun1", "verb", "noun2") %>% group_by(noun1, verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar.mult(raw = FALSE) %>%
#head(100) %>%
DT::datatable()
#| message: false
#| warning: false
#| paged-print: true
select(df_lemmas, "verb", "noun2") %>% group_by(verb, noun2) %>% summarise(
n = n()
) %>% as.data.frame() %>% collex.covar(raw = FALSE) %>%
#head(100) %>%
DT::datatable(options = list(pageLength = 6))
